{"ast":null,"code":"import{useEffect,useRef,useState}from'react';const useProjectVisibility=(count,options)=>{const refs=useRef([]);const[visibility,setVisibility]=useState(new Array(count).fill(false));useEffect(()=>{const observers=refs.current.map((ref,index)=>{const observer=new IntersectionObserver(_ref=>{let[entry]=_ref;if(entry.isIntersecting){setVisibility(prevVisibility=>{const newVisibility=[...prevVisibility];newVisibility[index]=true;// Set to true to ensure it only happens once\nreturn newVisibility;});observer.unobserve(ref);}},options);if(ref)observer.observe(ref);return observer;});return()=>{observers.forEach((observer,index)=>{if(refs.current[index])observer.unobserve(refs.current[index]);});};},[options,count]);return[refs,visibility];};export default useProjectVisibility;","map":{"version":3,"names":["useEffect","useRef","useState","useProjectVisibility","count","options","refs","visibility","setVisibility","Array","fill","observers","current","map","ref","index","observer","IntersectionObserver","_ref","entry","isIntersecting","prevVisibility","newVisibility","unobserve","observe","forEach"],"sources":["D:/abrar/New folder/New folder/web development/Complete Mern Development/myportfolio/src/Components/UseProjectVisibility.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\nconst useProjectVisibility = (count, options) => {\r\n  const refs = useRef([]);\r\n  const [visibility, setVisibility] = useState(new Array(count).fill(false));\r\n\r\n  useEffect(() => {\r\n    const observers = refs.current.map((ref, index) => {\r\n      const observer = new IntersectionObserver(([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setVisibility(prevVisibility => {\r\n            const newVisibility = [...prevVisibility];\r\n            newVisibility[index] = true; // Set to true to ensure it only happens once\r\n            return newVisibility;\r\n          });\r\n          observer.unobserve(ref);\r\n        }\r\n      }, options);\r\n\r\n      if (ref) observer.observe(ref);\r\n\r\n      return observer;\r\n    });\r\n\r\n    return () => {\r\n      observers.forEach((observer, index) => {\r\n        if (refs.current[index]) observer.unobserve(refs.current[index]);\r\n      });\r\n    };\r\n  }, [options, count]);\r\n\r\n  return [refs, visibility];\r\n};\r\n\r\nexport default useProjectVisibility;\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAEnD,KAAM,CAAAC,oBAAoB,CAAGA,CAACC,KAAK,CAAEC,OAAO,GAAK,CAC/C,KAAM,CAAAC,IAAI,CAAGL,MAAM,CAAC,EAAE,CAAC,CACvB,KAAM,CAACM,UAAU,CAAEC,aAAa,CAAC,CAAGN,QAAQ,CAAC,GAAI,CAAAO,KAAK,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,KAAK,CAAC,CAAC,CAE1EV,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,SAAS,CAAGL,IAAI,CAACM,OAAO,CAACC,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAK,CACjD,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CAACC,IAAA,EAAa,IAAZ,CAACC,KAAK,CAAC,CAAAD,IAAA,CAChD,GAAIC,KAAK,CAACC,cAAc,CAAE,CACxBZ,aAAa,CAACa,cAAc,EAAI,CAC9B,KAAM,CAAAC,aAAa,CAAG,CAAC,GAAGD,cAAc,CAAC,CACzCC,aAAa,CAACP,KAAK,CAAC,CAAG,IAAI,CAAE;AAC7B,MAAO,CAAAO,aAAa,CACtB,CAAC,CAAC,CACFN,QAAQ,CAACO,SAAS,CAACT,GAAG,CAAC,CACzB,CACF,CAAC,CAAET,OAAO,CAAC,CAEX,GAAIS,GAAG,CAAEE,QAAQ,CAACQ,OAAO,CAACV,GAAG,CAAC,CAE9B,MAAO,CAAAE,QAAQ,CACjB,CAAC,CAAC,CAEF,MAAO,IAAM,CACXL,SAAS,CAACc,OAAO,CAAC,CAACT,QAAQ,CAAED,KAAK,GAAK,CACrC,GAAIT,IAAI,CAACM,OAAO,CAACG,KAAK,CAAC,CAAEC,QAAQ,CAACO,SAAS,CAACjB,IAAI,CAACM,OAAO,CAACG,KAAK,CAAC,CAAC,CAClE,CAAC,CAAC,CACJ,CAAC,CACH,CAAC,CAAE,CAACV,OAAO,CAAED,KAAK,CAAC,CAAC,CAEpB,MAAO,CAACE,IAAI,CAAEC,UAAU,CAAC,CAC3B,CAAC,CAED,cAAe,CAAAJ,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}